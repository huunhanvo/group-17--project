// middleware/uploadMiddleware.js
const multer = require('multer');
const sharp = require('sharp');

// C·∫•u h√¨nh Multer ƒë·ªÉ l∆∞u file v√†o memory
const storage = multer.memoryStorage();

// Filter ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh
const fileFilter = (req, file, cb) => {
    // Ki·ªÉm tra mimetype
    if (file.mimetype.startsWith('image/')) {
        cb(null, true);
    } else {
        cb(new Error('Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh! (jpg, jpeg, png, gif)'), false);
    }
};

// C·∫•u h√¨nh upload
const upload = multer({
    storage: storage,
    fileFilter: fileFilter,
    limits: {
        fileSize: 5 * 1024 * 1024 // Gi·ªõi h·∫°n 5MB
    }
});

// Middleware resize ·∫£nh v·ªõi Sharp
const resizeAvatar = async (req, res, next) => {
    if (!req.file) {
        return next();
    }

    try {
        console.log('üîÑ ƒêang resize ·∫£nh...', {
            originalSize: req.file.size,
            originalFormat: req.file.mimetype
        });

        // Resize ·∫£nh v·ªÅ 500x500px, format webp/jpeg ƒë·ªÉ t·ªëi ∆∞u dung l∆∞·ª£ng
        // Gi·∫£m quality xu·ªëng 80% ƒë·ªÉ upload nhanh h∆°n
        const resizedBuffer = await sharp(req.file.buffer)
            .resize(500, 500, {
                fit: 'cover',
                position: 'center'
            })
            .jpeg({ quality: 80, progressive: true }) // D√πng JPEG thay v√¨ WebP cho t∆∞∆°ng th√≠ch t·ªët h∆°n
            .toBuffer();

        // G·∫Øn buffer ƒë√£ resize v√†o req.file
        req.file.buffer = resizedBuffer;
        req.file.mimetype = 'image/jpeg';

        console.log('‚úÖ ·∫¢nh ƒë√£ ƒë∆∞·ª£c resize:', {
            originalSize: req.file.size,
            resizedSize: resizedBuffer.length,
            reduction: `${((1 - resizedBuffer.length / req.file.size) * 100).toFixed(1)}%`,
            format: 'jpeg'
        });

        next();
    } catch (error) {
        console.error('‚ùå L·ªói khi resize ·∫£nh:', error);
        return res.status(500).json({
            success: false,
            message: 'L·ªói khi x·ª≠ l√Ω ·∫£nh',
            error: error.message
        });
    }
};

module.exports = {
    upload,
    resizeAvatar
};

const rateLimit = require('express-rate-limit');
const logger = require('../config/logger');

// Rate limiter chung cho API
const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 ph√∫t
  max: 100, // T·ªëi ƒëa 100 requests m·ªói 15 ph√∫t
  message: {
    success: false,
    message: '‚õî Qu√° nhi·ªÅu requests t·ª´ IP n√†y. Vui l√≤ng th·ª≠ l·∫°i sau 15 ph√∫t.'
  },
  standardHeaders: true, // Return rate limit info in `RateLimit-*` headers
  legacyHeaders: false, // Disable `X-RateLimit-*` headers
  handler: (req, res) => {
    logger.warn(`Rate limit exceeded for IP: ${req.ip}`);
    res.status(429).json({
      success: false,
      message: '‚õî Qu√° nhi·ªÅu requests t·ª´ IP n√†y. Vui l√≤ng th·ª≠ l·∫°i sau 15 ph√∫t.'
    });
  }
});

// Rate limiter nghi√™m ng·∫∑t cho login (ch·ªëng brute force)
const loginLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 ph√∫t
  max: 5, // T·ªëi ƒëa 5 l·∫ßn ƒëƒÉng nh·∫≠p sai m·ªói 15 ph√∫t
  skipSuccessfulRequests: true, // Kh√¥ng ƒë·∫øm request th√†nh c√¥ng
  message: {
    success: false,
    message: 'üîí Qu√° nhi·ªÅu l·∫ßn ƒëƒÉng nh·∫≠p th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i sau 15 ph√∫t.'
  },
  handler: (req, res) => {
    logger.warn(`Login rate limit exceeded for IP: ${req.ip}, Email: ${req.body.email}`);
    res.status(429).json({
      success: false,
      message: 'üîí Qu√° nhi·ªÅu l·∫ßn ƒëƒÉng nh·∫≠p th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i sau 15 ph√∫t.'
    });
  }
});

// Rate limiter cho signup (ch·ªëng spam t·∫°o t√†i kho·∫£n)
const signupLimiter = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 gi·ªù
  max: 3, // T·ªëi ƒëa 3 t√†i kho·∫£n m·ªói IP m·ªói gi·ªù
  message: {
    success: false,
    message: 'üö´ Qu√° nhi·ªÅu t√†i kho·∫£n ƒë∆∞·ª£c t·∫°o t·ª´ IP n√†y. Vui l√≤ng th·ª≠ l·∫°i sau 1 gi·ªù.'
  },
  handler: (req, res) => {
    logger.warn(`Signup rate limit exceeded for IP: ${req.ip}`);
    res.status(429).json({
      success: false,
      message: 'üö´ Qu√° nhi·ªÅu t√†i kho·∫£n ƒë∆∞·ª£c t·∫°o t·ª´ IP n√†y. Vui l√≤ng th·ª≠ l·∫°i sau 1 gi·ªù.'
    });
  }
});

// Rate limiter cho forgot password (ch·ªëng spam email)
const forgotPasswordLimiter = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 gi·ªù
  max: 3, // T·ªëi ƒëa 3 requests m·ªói gi·ªù
  message: {
    success: false,
    message: 'üìß Qu√° nhi·ªÅu y√™u c·∫ßu reset password. Vui l√≤ng th·ª≠ l·∫°i sau 1 gi·ªù.'
  },
  handler: (req, res) => {
    logger.warn(`Forgot password rate limit exceeded for IP: ${req.ip}, Email: ${req.body.email}`);
    res.status(429).json({
      success: false,
      message: 'üìß Qu√° nhi·ªÅu y√™u c·∫ßu reset password. Vui l√≤ng th·ª≠ l·∫°i sau 1 gi·ªù.'
    });
  }
});

// Rate limiter cho avatar upload
const uploadLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 ph√∫t
  max: 10, // T·ªëi ƒëa 10 uploads m·ªói 15 ph√∫t
  message: {
    success: false,
    message: '‚¨ÜÔ∏è Qu√° nhi·ªÅu uploads. Vui l√≤ng th·ª≠ l·∫°i sau 15 ph√∫t.'
  },
  handler: (req, res) => {
    logger.warn(`Upload rate limit exceeded for IP: ${req.ip}`);
    res.status(429).json({
      success: false,
      message: '‚¨ÜÔ∏è Qu√° nhi·ªÅu uploads. Vui l√≤ng th·ª≠ l·∫°i sau 15 ph√∫t.'
    });
  }
});

module.exports = {
  apiLimiter,
  loginLimiter,
  signupLimiter,
  forgotPasswordLimiter,
  uploadLimiter
};

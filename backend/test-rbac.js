// test-rbac.js - Script test RBAC API v·ªõi c√°c role kh√°c nhau
const axios = require("axios");

const API_URL = "http://localhost:3000";

// M√†u cho console
const colors = {
    reset: "\x1b[0m",
    green: "\x1b[32m",
    red: "\x1b[31m",
    yellow: "\x1b[33m",
    blue: "\x1b[34m",
    cyan: "\x1b[36m"
};

const log = {
    success: (msg) => console.log(`${colors.green}‚úÖ ${msg}${colors.reset}`),
    error: (msg) => console.log(`${colors.red}‚ùå ${msg}${colors.reset}`),
    info: (msg) => console.log(`${colors.blue}‚ÑπÔ∏è  ${msg}${colors.reset}`),
    warning: (msg) => console.log(`${colors.yellow}‚ö†Ô∏è  ${msg}${colors.reset}`),
    title: (msg) => console.log(`\n${colors.cyan}${"=".repeat(60)}\n${msg}\n${"=".repeat(60)}${colors.reset}`)
};

// Tokens l∆∞u tr·ªØ
let adminToken = "";
let moderatorToken = "";
let userToken = "";
let testUserId = "";

// H√†m login
async function login(email, password, roleName) {
    try {
        log.info(`ƒêƒÉng nh·∫≠p ${roleName}: ${email}`);
        const response = await axios.post(`${API_URL}/auth/login`, { email, password });
        log.success(`ƒêƒÉng nh·∫≠p th√†nh c√¥ng: ${response.data.user.name} (${response.data.user.role})`);
        return response.data.token;
    } catch (error) {
        log.error(`ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: ${error.response?.data?.message || error.message}`);
        return null;
    }
}

// Test 1: ƒêƒÉng nh·∫≠p c√°c role
async function test1_Login() {
    log.title("TEST 1: ƒêƒÇNG NH·∫¨P C√ÅC ROLE");
    
    adminToken = await login("admin@example.com", "admin123", "ADMIN");
    moderatorToken = await login("moderator@example.com", "moderator123", "MODERATOR");
    userToken = await login("user1@example.com", "user123", "USER");
    
    if (!adminToken || !moderatorToken || !userToken) {
        log.error("Kh√¥ng th·ªÉ l·∫•y token. Vui l√≤ng ch·∫°y: node seedUsers.js tr∆∞·ªõc");
        process.exit(1);
    }
}

// Test 2: L·∫•y danh s√°ch users v·ªõi c√°c role kh√°c nhau
async function test2_GetAllUsers() {
    log.title("TEST 2: L·∫§Y DANH S√ÅCH USERS");
    
    // Admin - C√≥ quy·ªÅn
    try {
        log.info("Admin l·∫•y danh s√°ch users...");
        const response = await axios.get(`${API_URL}/users`, {
            headers: { Authorization: `Bearer ${adminToken}` }
        });
        log.success(`Admin: L·∫•y ƒë∆∞·ª£c ${response.data.count} users`);
    } catch (error) {
        log.error(`Admin: ${error.response?.data?.message}`);
    }
    
    // Moderator - C√≥ quy·ªÅn
    try {
        log.info("Moderator l·∫•y danh s√°ch users...");
        const response = await axios.get(`${API_URL}/users`, {
            headers: { Authorization: `Bearer ${moderatorToken}` }
        });
        log.success(`Moderator: L·∫•y ƒë∆∞·ª£c ${response.data.count} users`);
    } catch (error) {
        log.error(`Moderator: ${error.response?.data?.message}`);
    }
    
    // User - KH√îNG c√≥ quy·ªÅn
    try {
        log.info("User l·∫•y danh s√°ch users...");
        const response = await axios.get(`${API_URL}/users`, {
            headers: { Authorization: `Bearer ${userToken}` }
        });
        log.success(`User: L·∫•y ƒë∆∞·ª£c ${response.data.count} users`);
    } catch (error) {
        log.warning(`User: ${error.response?.data?.message} (Expected!)`);
    }
}

// Test 3: L·∫•y th·ªëng k√™ users
async function test3_GetStats() {
    log.title("TEST 3: L·∫§Y TH·ªêNG K√ä USERS");
    
    // Admin - C√≥ quy·ªÅn
    try {
        log.info("Admin l·∫•y th·ªëng k√™...");
        const response = await axios.get(`${API_URL}/users/stats`, {
            headers: { Authorization: `Bearer ${adminToken}` }
        });
        log.success(`Admin: ${JSON.stringify(response.data.stats)}`);
    } catch (error) {
        log.error(`Admin: ${error.response?.data?.message}`);
    }
    
    // User - KH√îNG c√≥ quy·ªÅn
    try {
        log.info("User l·∫•y th·ªëng k√™...");
        const response = await axios.get(`${API_URL}/users/stats`, {
            headers: { Authorization: `Bearer ${userToken}` }
        });
        log.success(`User: ${JSON.stringify(response.data.stats)}`);
    } catch (error) {
        log.warning(`User: ${error.response?.data?.message} (Expected!)`);
    }
}

// Test 4: C·∫≠p nh·∫≠t role
async function test4_UpdateRole() {
    log.title("TEST 4: C·∫¨P NH·∫¨T ROLE");
    
    // L·∫•y ID c·ªßa user1 ƒë·ªÉ test
    try {
        const response = await axios.get(`${API_URL}/users`, {
            headers: { Authorization: `Bearer ${adminToken}` }
        });
        const user1 = response.data.users.find(u => u.email === "user2@example.com");
        if (user1) {
            testUserId = user1._id;
        }
    } catch (error) {
        log.error("Kh√¥ng th·ªÉ l·∫•y user ID");
        return;
    }
    
    // Admin c·∫≠p nh·∫≠t role - C√≥ quy·ªÅn
    try {
        log.info(`Admin c·∫≠p nh·∫≠t role c·ªßa user ${testUserId}...`);
        const response = await axios.put(
            `${API_URL}/users/${testUserId}/role`,
            { role: "moderator" },
            { headers: { Authorization: `Bearer ${adminToken}` } }
        );
        log.success(`Admin: ${response.data.message}`);
    } catch (error) {
        log.error(`Admin: ${error.response?.data?.message}`);
    }
    
    // User c·∫≠p nh·∫≠t role - KH√îNG c√≥ quy·ªÅn
    try {
        log.info(`User c·∫≠p nh·∫≠t role...`);
        const response = await axios.put(
            `${API_URL}/users/${testUserId}/role`,
            { role: "admin" },
            { headers: { Authorization: `Bearer ${userToken}` } }
        );
        log.success(`User: ${response.data.message}`);
    } catch (error) {
        log.warning(`User: ${error.response?.data?.message} (Expected!)`);
    }
}

// Test 5: X√≥a user
async function test5_DeleteUser() {
    log.title("TEST 5: X√ìA USER");
    
    // Moderator x√≥a user - KH√îNG c√≥ quy·ªÅn
    try {
        log.info(`Moderator x√≥a user...`);
        const response = await axios.delete(`${API_URL}/users/${testUserId}`, {
            headers: { Authorization: `Bearer ${moderatorToken}` }
        });
        log.success(`Moderator: ${response.data.message}`);
    } catch (error) {
        log.warning(`Moderator: ${error.response?.data?.message} (Expected!)`);
    }
    
    // Admin x√≥a user - C√≥ quy·ªÅn (comment l·∫°i ƒë·ªÉ kh√¥ng x√≥a th·∫≠t)
    log.info("Admin c√≥ th·ªÉ x√≥a user nh∆∞ng skip ƒë·ªÉ gi·ªØ data...");
}

// Ch·∫°y t·∫•t c·∫£ tests
async function runAllTests() {
    try {
        await test1_Login();
        await test2_GetAllUsers();
        await test3_GetStats();
        await test4_UpdateRole();
        await test5_DeleteUser();
        
        log.title("üéâ HO√ÄN T·∫§T T·∫§T C·∫¢ TESTS!");
        console.log("\nüìã K·∫æT LU·∫¨N:");
        console.log("‚úÖ Admin: C√≥ ƒë·∫ßy ƒë·ªß quy·ªÅn");
        console.log("‚úÖ Moderator: C√≥ quy·ªÅn xem users v√† th·ªëng k√™");
        console.log("‚úÖ User: Ch·ªâ xem ƒë∆∞·ª£c th√¥ng tin c·ªßa ch√≠nh m√¨nh");
        
    } catch (error) {
        log.error(`L·ªói khi ch·∫°y tests: ${error.message}`);
    }
}

// Ch·∫°y
console.log(`\nüöÄ B·∫Øt ƒë·∫ßu test RBAC API t·∫°i ${API_URL}\n`);
runAllTests();
